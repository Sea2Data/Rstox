% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rstox_base.r
\name{createProject}
\alias{createProject}
\alias{openProject}
\alias{reopenProject}
\alias{getProject}
\alias{listOpenProjects}
\alias{updateProject}
\alias{modifyProject}
\alias{saveProject}
\alias{saveasProject}
\alias{resetProject}
\alias{closeProject}
\alias{closeAllProjects}
\alias{isProject}
\alias{getAvailableProjects}
\alias{readXMLfiles}
\title{Create, open or save a StoX project}
\usage{
createProject(projectName = NULL, files = list(), dir = NULL,
  model = "StationLengthDistTemplate", ow = NULL, open = TRUE,
  ignore.processXML = FALSE, parlist = list(), msg = TRUE, ...)

openProject(projectName = NULL, out = c("project", "baseline",
  "baseline-report", "name"), msg = FALSE)

reopenProject(projectName, out = c("project", "baseline",
  "baseline-report", "name"))

getProject(projectName, out = c("project", "baseline", "baseline-report",
  "name"), msg = FALSE)

listOpenProjects()

updateProject(projectName, relative.path = TRUE, close = FALSE)

modifyProject(projectName, close = TRUE, parlist = list(), ...)

saveProject(projectName, soft = FALSE)

saveasProject(projectName, newProjectName, dir = NULL, ow = NULL,
  msg = TRUE)

resetProject(projectName, to = "original")

closeProject(projectName)

closeAllProjects()

isProject(projectName, subset.out = FALSE)

getAvailableProjects()

readXMLfiles(files, dir = tempdir(), model = list(), nchars = 500)
}
\arguments{
\item{projectName}{The name or full path of the project, a baseline object 
(as returned from \code{getBaseline} or \code{runBaseline}), og a project
object (as returned from \code{openProject}). For \code{createProject}, 
\code{projectName}=NULL (the default) returns available templates, and 
for \code{openProject}, zeros length \code{projectName} returns all StoX 
projects in the default workspace either given as a vector of full paths, 
or, in the case projectName is an empty list, a list of names of StoX 
projects located in the default workspace and sub directories. Projects 
locataed in sub directories of the default workspace can be given by the 
relative path, or are searched for by name.}

\item{files}{A list with elements named "acoustic", "biotic", "landing", 
"process" (holding the project.xml file) or other implemented types of 
data to be copied to the project (available data types are stored in 
Definitions$StoX_data_sources in the environment "RstoxEnv". Get these 
by getRstoxDef("StoX_data_sources"). These could be given as directories, 
in which case all files within the directories are copied, or as URLs. 
If given as a single path to a directory holding sub-directories with 
names "acoustic", "biotic", "landing", "process" or other implemented 
types of data, the files are copied from these directories. 
If \code{files} has length 0 (default), no files are written to the 
project except the project.xml file using the specified \code{model}. 
If multiple projects are created, the files are copied to all projects. 
If given as a single URL to a zipped StoX project, the project is 
downloaded and unzipped.}

\item{dir}{The directory in which to put the project. The project is a directory holding three sub directories named "input", "output" and "process", where input, output and process files are stored.}

\item{model}{The model to use, either given as a string specifying a template, or a vector of process names or list of processes given as lists of parameter specifications (see \code{parlist}). Show available templates with createProject().}

\item{ow}{Specifies whether to ovewrite existing project: If TRUE, overwrite; if FALSE, do not overwrite; if NULL (default), aks the user to confitm overwriting.}

\item{open}{Logical: if TRUE (defalut) open the project in memory.}

\item{ignore.processXML}{Logical: if TRUE do not copy any project.XML file given in \code{files} to the project.}

\item{parlist, ...}{See \code{\link{runBaseline}}.}

\item{msg}{Logical: If TRUE, print messages to the console.}

\item{out}{One of "project", "baseline" or "name" (project name), specifying the output.}

\item{relative.path}{Logical: If TRUE, update the project.xml file with the relative paths in Read* functions.}

\item{close}{Logical: If TRUE, close the project after updating file paths (used in \code{updateProject}).}

\item{soft}{Logical: If TRUE, do not save the current javaParameters to the savedParameters field in the project environment (used in saveasProject()).}

\item{newProjectName}{The name of the project to save an open project as.}

\item{to}{A string naming the parameters to reset a project to (one of "original" and "saved", where the latter is only used in saveasProject()).}

\item{subset.out}{Logical: Used in \code{is.project}. If TRUE, subset the input project names, and if False, return a logical vector.}

\item{nchars}{The number of characters to read when determining the types of the files in readXMLfiles().}
}
\value{
A project object
\code{createProject} returns the path to the StoX project directory. \cr \cr
\code{openProject} returns the object specified in 'out'. \cr \cr
\code{reopenProject} returns the object specified in 'out'. \cr \cr
\code{getProject} returns the requested object (one of the project object, the baseline, object, the baseline report object, ot the project name). If the project is not open, NULL is returned. \cr \cr
\code{updateProject} returns TRUE for success and FALSE for no XML files linked to reading functions. \cr \cr
\code{saveProject} returns the project object. \cr \cr
\code{closeProject} returns TRUE if the project was open and FALSE if not. \cr \cr
\code{isProject} returns TRUE if the project exists on file and FALSE if not. \cr \cr
\code{readXMLfiles} returns the XML data. \cr \cr
}
\description{
\code{createProject} creates a new StoX project (from xml files). \cr \cr
\code{openProject} opens a StoX project. If the project has already been opened, \code{openProject} will only retrieve the project object from the RstoxEnv enviromnent. To force open the project use \code{reopenProject}. \cr \cr
\code{reopenProject} re-opens a StoX project, which is equivalent to closeing and then opening the project. \cr \cr
\code{getProject} gets a project object (one of "project", "baseline", "baseline-report", "name"), either from the input if this is a baseline or project object, or from the project environment. \cr \cr
\code{listOpenProjects} lists all open projects. \cr \cr
\code{updateProject} updates links to xml files in a project. \cr \cr
\code{modifyProject} modifies a project by the inpputs \code{parlist} and \code{...} (reopens, modifies, saves and optionally closes the project). \cr \cr
\code{saveProject} saves a StoX project. This implies to save to the project.XML file all changes that are made to the project environment, such as changes in parameter values through the "..." input to runBaseline(). Such changes are only implemented in the project environment (in R memory), and will not be saved to the project.XML file unless saveProject() is run. \cr \cr
\code{saveasProject} saves the project as a new project (settings in Java memory are saved to the new project but not to the existing project). \cr \cr
\code{resetProject} resets a project to the original settings. \cr \cr
\code{closeProject} removes the project from memory. \cr \cr
\code{closeAllProjects} removes all projects from memory. \cr \cr
\code{isProject} checks whether the project exists on file. \cr \cr
\code{getAvailableProjects} lists available projects. \cr \cr
\code{readXMLfiles} reads XML data via a temporary project. \cr \cr
}
\examples{
# Show templates:
templ <- createProject()
names(templ)
str(templ)

# See avilable projects, either as full paths or as a list:
op <- openProject()
str(op)
opl <- openProject(list())
str(opl)
# A test project "Test_Rstox" is automatically created when openProject("Test_Rstox") is run. 
# If one wishes to re-create the "Test_Rstox" project, use createProject("Test_Rstox", ow=TRUE).

# Read xml file directly from any location:
xmlfiles <- system.file("extdata", "Test_Rstox", package="Rstox", "input")
list.files(xmlfiles, recursive=TRUE)
dat <- readXMLfiles(xmlfiles)

}
